[build-system]
requires = ["pdm-pep517>=1.0.0"]
build-backend = "pdm.pep517.api"

[project]
name = "arclet-alconna"
version = "1.4.2.1"
description = "A High-performance, Generality, Humane Command Line Arguments Parser Library."
authors = [
    {name = "RF-Tar-Railt", email = "rf_tar_railt@qq.com"},
]
dependencies = [
    "typing-extensions~=4.4.0",
    "nepattern>=0.3.2",
]
requires-python = ">=3.8"
readme = "README-EN.md"
license = {text = "MIT"}
keywords = [
    "command",
    "argparse",
    "fast",
    "alconna",
    "cli",
    "command-line",
    "parsing",
    "optparse"
]
classifiers=[
    "Typing :: Typed",
    "Development Status :: 5 - Production/Stable",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Operating System :: OS Independent",
]
[project.urls]
documentation = "https://arcletproject.github.io/docs/alconna/tutorial"
repository = "https://github.com/ArcletProject/Alconna"

[project.optional-dependencies]
full = ["arclet-alconna-tools>=0.2.0"]
cli = ["arclet-alconna-cli>=0.3.0"]
graia = ["arclet-alconna-graia>=0.9.0"]
all = ["arclet-alconna-cli>=0.3.0", "arclet-alconna-graia>=0.8.0", "arclet-alconna-tools>=0.2.0"]

[tool.pdm]

[tool.pdm.build]
includes = ["src/arclet"]

[tool.pdm.dev-dependencies]
dev = [
    "pytest~=7.2.0",
    "coverage~=6.5.0",
    "pydeps~=1.11.0",
    "fix-future-annotations>=0.4.0",
]

[tool.pylint.BASIC]
class-const-naming-style = "any"

[tool.pylint."MESSAGE CONTROL"]
max-line-length = 120
disable = [
    "broad-except",
    "wrong-import-order",
    "unused-import",
    "invalid-name",
    "use-a-generator",
    "unbalanced-tuple-unpacking",
    "inconsistent-return-statements",
    "redefined-builtin",
    "redefined-outer-name",
    "import-outside-toplevel",
    "too-many-arguments",
    "too-many-instance-attributes",
    "too-many-branches",
    "too-many-boolean-expressions",
    "too-many-locals",
    "too-many-statements",
    "too-many-return-statements",
    "super-init-not-called",
    "no-self-use"
]

[tool.coverage.run]
branch = true
source = ["."]
omit = ["test_alconna/entry_test.py"]

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_lines = [
    # standard pragma
    "pragma: no cover",
    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",
    "if (typing\\.)?TYPE_CHECKING( is True)?:",
    "\\.\\.\\.",
    "pass",
    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",
    # Don't complain overload method / functions
    "@(typing\\.)?overload",
    "def __repr__",
    "def __str__",
    "def __eq__",
    "except ImportError:",
]